package stc.zatca.tests;

import java.io.IOException;

import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.testng.ITestContext;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import com.shaft.tools.io.ReportManager;
import com.shaft.validation.Validations;

import stc.zatca.bussiness.Commands.InvoiceType;
import stc.zatca.bussiness.GenerateCSID;
import stc.zatca.pojo.CSIDProductionResponse;
import stc.zatca.pojo.ComplianceCSIDResponse;
import stc.zatca.pojo.complianceInvoice.ComplianceInvoiceResponse;
import stc.zatca.testdata.TestData;
import stc.zatca.tests.base.BaseTest;
import stc.zatca.utils.Constants;

public class OnboardingTests extends BaseTest {
	
	public GenerateCSID generateCSIDObj;
	
	
	@BeforeMethod
	public void beforeMethod() {
		getBaseApiObj();
		generateCSIDObj=new GenerateCSID(apiObj,properties);
		
	}
	
	/**
	 * Function to read data for testCSIDStandardInvoice testcase
	 *
	 * @return Object[][] 2d array contains data from excel sheet
	 */

	@DataProvider(name = "testCSIDStandardInvoiceTestData")
	public Object[][] testCSIDStandardInvoiceTestData() throws InvalidFormatException, IOException {

		Object[][] data = TestData.fetchData(properties.getProperty("testDataPath"), "testCSIDStandardInvoice");
		return data;
	}
	
	/**
	 * Function to read data for testCSIDSimplifiedInvoice testcase
	 *
	 * @return Object[][] 2d array contains data from excel sheet
	 */

	@DataProvider(name = "testCSIDSimplifiedInvoiceTestData")
	public Object[][] testCSIDSimplifiedInvoiceTestData() throws InvalidFormatException, IOException {

		Object[][] data = TestData.fetchData(properties.getProperty("testDataPath"), "testCSIDSimplifiedInvoice");
		return data;
	}
	
	/**
	 * Function to read data for testCSIDBothInvoice testcase
	 *
	 * @return Object[][] 2d array contains data from excel sheet
	 */

	@DataProvider(name = "testCSIDBothInvoiceTestData")
	public Object[][] testCSIDBothInvoiceTestData() throws InvalidFormatException, IOException {

		Object[][] data = TestData.fetchData(properties.getProperty("testDataPath"), "testCSIDBothInvoice");
		return data;
	}
	
	
	@Test(description="Create CSID for standard invoice",dataProvider = "testCSIDStandardInvoiceTestData") 
	public void testCSIDStandardInvoice(String invoiceFileName,String invoiceCreditFileName,String invoiceDebitFileName,
			String csrFileName,String vatNumber,ITestContext testContext){
		ReportManager.log("Start Standard Flow.");
		String token=null;
		String secretKey = null;
		String requestId=null;
		ComplianceCSIDResponse ComplianceCSIDResponseObj=null;
		ComplianceInvoiceResponse ComplianceInvoiceResponseObj=null;
		CSIDProductionResponse CSIDProductionResponseObj=null;
		
		//Step1 validate , generate CSR & Call compliance CSID Service
		
		ComplianceCSIDResponseObj=generateCSIDObj.complianceCSID(InvoiceType.STANDARDNOTE,invoiceFileName, vatNumber, csrFileName);
		Validations.assertThat().object(ComplianceCSIDResponseObj.getErrors()).isNull().perform();
		ReportManager.log("Initial CSID generated by all details successfully");
		token=ComplianceCSIDResponseObj.getBinarySecurityToken();
		secretKey=ComplianceCSIDResponseObj.getSecret();
		requestId=ComplianceCSIDResponseObj.getRequestID();
		//Step2 Generate invoice request & call compliance invoice to clear the invoices 
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDNOTE, invoiceFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Invoice Note cleared successfully.");
	    ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDCREDIT, invoiceCreditFileName, token, secretKey);
	    Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Credit Invoice Note cleared successfully.");
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDDEBIT, invoiceDebitFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Debit Invoice Note cleared successfully.");
		CSIDProductionResponseObj=generateCSIDObj.csidProduction(token, secretKey, requestId);
        Validations.assertThat().object(CSIDProductionResponseObj.getRequestID()).isNotNull().perform();
        testContext.setAttribute(Constants.BINARYSECURITYTOKEN, CSIDProductionResponseObj.getBinarySecurityToken());
        testContext.setAttribute(Constants.SECRET, CSIDProductionResponseObj.getSecret());
        ReportManager.log("Standard Production CSID generated successfully.");
		 
	}
	
	@Test(description="Create CSID for simplified invoice",dataProvider = "testCSIDSimplifiedInvoiceTestData") 
	public void testCSIDSimplifiedInvoice(String invoiceFileName,String invoiceCreditFileName,String invoiceDebitFileName,
			String csrFileName,String vatNumber,ITestContext testContext){
		
		String token=null;
		String secretKey = null;
		String requestId=null;
		ComplianceCSIDResponse ComplianceCSIDResponseObj=null;
		ComplianceInvoiceResponse ComplianceInvoiceResponseObj=null;
		CSIDProductionResponse CSIDProductionResponseObj=null;
		
		
		//Step1 validate , generate CSR & Call compliance CSID Service
		ComplianceCSIDResponseObj=generateCSIDObj.complianceSimplifiedCSID(InvoiceType.SIMPLIFIEDNOTE,invoiceFileName, vatNumber, csrFileName);
		Validations.assertThat().object(ComplianceCSIDResponseObj.getErrors()).isNull().perform();
		ReportManager.log("Initial CSID generated by all details successfully");
		token=ComplianceCSIDResponseObj.getBinarySecurityToken();
		secretKey=ComplianceCSIDResponseObj.getSecret();
		requestId=ComplianceCSIDResponseObj.getRequestID();
		//Step2 Generate invoice request & call compliance invoice to clear the invoices 
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDNOTE, invoiceFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Invoice Note cleared successfully.");
	    ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDCREDIT, invoiceCreditFileName, token, secretKey);
	    Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Credit Invoice Note cleared successfully.");
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDDEBIT, invoiceDebitFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Debit Invoice Note cleared successfully.");
		CSIDProductionResponseObj=generateCSIDObj.csidProduction(token, secretKey, requestId);
        Validations.assertThat().object(CSIDProductionResponseObj.getRequestID()).isNotNull().perform();
        testContext.setAttribute(Constants.BINARYSECURITYTOKEN, CSIDProductionResponseObj.getBinarySecurityToken());
        testContext.setAttribute(Constants.SECRET, CSIDProductionResponseObj.getSecret());
        ReportManager.log("Standard Production CSID generated successfully.");
		 
	}
	
	
	@Test(description="Create CSID for standard/simplified invoices",dataProvider = "testCSIDBothInvoiceTestData") 
	public void testCSIDBothInvoice(String invoiceFileName,String invoiceCreditFileName,String invoiceDebitFileName,String standardInvoiceFileName,
			String standardInvoiceCreditFileName,String standardInvoiceDebitFileName,String csrFileName,String vatNumber,ITestContext testContext){
		
		String token=null;
		String secretKey = null;
		String requestId=null;
		ComplianceCSIDResponse ComplianceCSIDResponseObj=null;
		ComplianceInvoiceResponse ComplianceInvoiceResponseObj=null;
		CSIDProductionResponse CSIDProductionResponseObj=null;
		
		
		//Step1 validate , generate CSR & Call compliance CSID Service
		ComplianceCSIDResponseObj=generateCSIDObj.complianceSimplifiedCSID(InvoiceType.SIMPLIFIEDNOTE,invoiceFileName, vatNumber, csrFileName);
		Validations.assertThat().object(ComplianceCSIDResponseObj.getErrors()).isNull().perform();
		ReportManager.log("Initial CSID generated by all details successfully");
		token=ComplianceCSIDResponseObj.getBinarySecurityToken();
		secretKey=ComplianceCSIDResponseObj.getSecret();
		requestId=ComplianceCSIDResponseObj.getRequestID();
		//Step2 Generate invoice request & call compliance invoice to clear the invoices 
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDNOTE, invoiceFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Invoice Note cleared successfully.");
	    ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDCREDIT, invoiceCreditFileName, token, secretKey);
	    Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Credit Invoice Note cleared successfully.");
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.SIMPLIFIEDDEBIT, invoiceDebitFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Debit Invoice Note cleared successfully.");
		
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDNOTE, standardInvoiceFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Invoice Note cleared successfully.");
	    ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDCREDIT, standardInvoiceCreditFileName, token, secretKey);
	    Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
		ReportManager.log("Standard Credit Invoice Note cleared successfully.");
		ComplianceInvoiceResponseObj=generateCSIDObj.complianceInvoice(InvoiceType.STANDARDDEBIT, standardInvoiceDebitFileName, token, secretKey);
		Validations.assertThat().object(ComplianceInvoiceResponseObj).isNotNull().perform();
		Validations.assertThat().object(ComplianceInvoiceResponseObj.getValidationResults().getStatus()).contains("PASS").perform();
				ReportManager.log("Standard Debit Invoice Note cleared successfully.");
		
				
		CSIDProductionResponseObj=generateCSIDObj.csidProduction(token, secretKey, requestId);
		Validations.assertThat().object(CSIDProductionResponseObj.getRequestID()).isNotNull().perform();
	     testContext.setAttribute(Constants.BINARYSECURITYTOKEN, CSIDProductionResponseObj.getBinarySecurityToken());
	     testContext.setAttribute(Constants.SECRET, CSIDProductionResponseObj.getSecret());
        ReportManager.log("Standard Production CSID generated successfully.");
		 
	}
	
	
	
    
	
}
